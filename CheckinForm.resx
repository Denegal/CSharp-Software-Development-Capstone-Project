<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="button_checkin.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>